Using base prefix '/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/python/3.8.2'
New python executable in /localscratch/ng1998.64227221.0/env/bin/python
Installing setuptools, pip, wheel...
done.
Ignoring pip: markers 'python_version < "3"' don't match your environment
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/generic/scipy-1.5.2-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/generic/numpy-1.19.1-cp38-cp38-linux_x86_64.whl
Installing collected packages: numpy, scipy
Successfully installed numpy-1.19.1 scipy-1.5.2
Ignoring pip: markers 'python_version < "3"' don't match your environment
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pandas-1.1.3-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/python_dateutil-2.8.1-py2.py3-none-any.whl
Requirement already satisfied: numpy>=1.15.4 in ./env/lib/python3.8/site-packages (from pandas) (1.19.1)
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pytz-2021.1-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/six-1.15.0-py2.py3-none-any.whl
Installing collected packages: six, python-dateutil, pytz, pandas
Successfully installed pandas-1.1.3 python-dateutil-2.8.1 pytz-2021.1 six-1.15.0
Ignoring pip: markers 'python_version < "3"' don't match your environment
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/matplotlib-3.3.2-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/cycler-0.10.0-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/generic/Pillow-7.2.0-cp38-cp38-linux_x86_64.whl
Requirement already satisfied: numpy>=1.15 in ./env/lib/python3.8/site-packages (from matplotlib) (1.19.1)
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/certifi-2020.12.5-py2.py3-none-any.whl
Requirement already satisfied: python-dateutil>=2.1 in ./env/lib/python3.8/site-packages (from matplotlib) (2.8.1)
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pyparsing-2.4.7-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/avx2/kiwisolver-1.3.1-cp38-cp38-linux_x86_64.whl
Requirement already satisfied: six in ./env/lib/python3.8/site-packages (from cycler>=0.10->matplotlib) (1.15.0)
Installing collected packages: cycler, pillow, certifi, pyparsing, kiwisolver, matplotlib
Successfully installed certifi-2020.12.5 cycler-0.10.0 kiwisolver-1.3.1 matplotlib-3.3.2 pillow-7.2.0 pyparsing-2.4.7
Ignoring pip: markers 'python_version < "3"' don't match your environment
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/seaborn-0.11.1-py3-none-any.whl
Requirement already satisfied: matplotlib>=2.2 in ./env/lib/python3.8/site-packages (from seaborn) (3.3.2)
Requirement already satisfied: pandas>=0.23 in ./env/lib/python3.8/site-packages (from seaborn) (1.1.3)
Requirement already satisfied: scipy>=1.0 in ./env/lib/python3.8/site-packages (from seaborn) (1.5.2)
Requirement already satisfied: numpy>=1.15 in ./env/lib/python3.8/site-packages (from seaborn) (1.19.1)
Requirement already satisfied: cycler>=0.10 in ./env/lib/python3.8/site-packages (from matplotlib>=2.2->seaborn) (0.10.0)
Requirement already satisfied: kiwisolver>=1.0.1 in ./env/lib/python3.8/site-packages (from matplotlib>=2.2->seaborn) (1.3.1)
Requirement already satisfied: python-dateutil>=2.1 in ./env/lib/python3.8/site-packages (from matplotlib>=2.2->seaborn) (2.8.1)
Requirement already satisfied: pillow>=6.2.0 in ./env/lib/python3.8/site-packages (from matplotlib>=2.2->seaborn) (7.2.0)
Requirement already satisfied: certifi>=2020.06.20 in ./env/lib/python3.8/site-packages (from matplotlib>=2.2->seaborn) (2020.12.5)
Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in ./env/lib/python3.8/site-packages (from matplotlib>=2.2->seaborn) (2.4.7)
Requirement already satisfied: pytz>=2017.2 in ./env/lib/python3.8/site-packages (from pandas>=0.23->seaborn) (2021.1)
Requirement already satisfied: six in ./env/lib/python3.8/site-packages (from cycler>=0.10->matplotlib>=2.2->seaborn) (1.15.0)
Installing collected packages: seaborn
Successfully installed seaborn-0.11.1
Ignoring pip: markers 'python_version < "3"' don't match your environment
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Processing /home/ng1998/.cache/pip/wheels/5d/4b/cf/ef50e71df5479d67f981cbb17b1d842381019d27ba144d57de/Brian2-2.4.2-cp38-cp38-linux_x86_64.whl
Requirement already satisfied: numpy>=1.15 in ./env/lib/python3.8/site-packages (from Brian2) (1.19.1)
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/Cython-0.29.22-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/sympy-1.7.1-py3-none-any.whl
Requirement already satisfied: pyparsing in ./env/lib/python3.8/site-packages (from Brian2) (2.4.7)
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/Jinja2-2.11.3-py2.py3-none-any.whl
Requirement already satisfied: setuptools>=24.2 in ./env/lib/python3.8/site-packages (from Brian2) (41.4.0)
Collecting mpmath>=0.19
  Using cached https://files.pythonhosted.org/packages/d4/cf/3965bddbb4f1a61c49aacae0e78fd1fe36b5dc36c797b31f30cf07dcbbb7/mpmath-1.2.1-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/MarkupSafe-1.1.1-cp38-cp38-linux_x86_64.whl
Installing collected packages: cython, mpmath, sympy, MarkupSafe, jinja2, Brian2
Successfully installed Brian2-2.4.2 MarkupSafe-1.1.1 cython-0.29.22 jinja2-2.11.3 mpmath-1.2.1 sympy-1.7.1
Ignoring pip: markers 'python_version < "3"' don't match your environment
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Collecting scikit_plot
  Using cached https://files.pythonhosted.org/packages/7c/47/32520e259340c140a4ad27c1b97050dd3254fdc517b1d59974d47037510e/scikit_plot-0.3.7-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/scikit_learn-0.23.0-cp38-cp38-linux_x86_64.whl
Requirement already satisfied: scipy>=0.9 in ./env/lib/python3.8/site-packages (from scikit_plot) (1.5.2)
Requirement already satisfied: matplotlib>=1.4.0 in ./env/lib/python3.8/site-packages (from scikit_plot) (3.3.2)
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/joblib-1.0.1-py3-none-any.whl
Requirement already satisfied: numpy>=1.13.3 in ./env/lib/python3.8/site-packages (from scikit-learn>=0.18->scikit_plot) (1.19.1)
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/threadpoolctl-2.1.0-py3-none-any.whl
Requirement already satisfied: certifi>=2020.06.20 in ./env/lib/python3.8/site-packages (from matplotlib>=1.4.0->scikit_plot) (2020.12.5)
Requirement already satisfied: python-dateutil>=2.1 in ./env/lib/python3.8/site-packages (from matplotlib>=1.4.0->scikit_plot) (2.8.1)
Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in ./env/lib/python3.8/site-packages (from matplotlib>=1.4.0->scikit_plot) (2.4.7)
Requirement already satisfied: pillow>=6.2.0 in ./env/lib/python3.8/site-packages (from matplotlib>=1.4.0->scikit_plot) (7.2.0)
Requirement already satisfied: kiwisolver>=1.0.1 in ./env/lib/python3.8/site-packages (from matplotlib>=1.4.0->scikit_plot) (1.3.1)
Requirement already satisfied: cycler>=0.10 in ./env/lib/python3.8/site-packages (from matplotlib>=1.4.0->scikit_plot) (0.10.0)
Requirement already satisfied: six>=1.5 in ./env/lib/python3.8/site-packages (from python-dateutil>=2.1->matplotlib>=1.4.0->scikit_plot) (1.15.0)
Installing collected packages: joblib, threadpoolctl, scikit-learn, scikit-plot
Successfully installed joblib-1.0.1 scikit-learn-0.23.0 scikit-plot-0.3.7 threadpoolctl-2.1.0
Ignoring pip: markers 'python_version < "3"' don't match your environment
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Requirement already satisfied: scikit_learn in ./env/lib/python3.8/site-packages (0.23.0)
Requirement already satisfied: threadpoolctl>=2.0.0 in ./env/lib/python3.8/site-packages (from scikit_learn) (2.1.0)
Requirement already satisfied: scipy>=0.19.1 in ./env/lib/python3.8/site-packages (from scikit_learn) (1.5.2)
Requirement already satisfied: numpy>=1.13.3 in ./env/lib/python3.8/site-packages (from scikit_learn) (1.19.1)
Requirement already satisfied: joblib>=0.11 in ./env/lib/python3.8/site-packages (from scikit_learn) (1.0.1)
Cloning into 'EMG_exp'...
Checking out files:  20% (337/1673)   Checking out files:  20% (338/1673)   Checking out files:  21% (352/1673)   Checking out files:  22% (369/1673)   Checking out files:  23% (385/1673)   Checking out files:  24% (402/1673)   Checking out files:  25% (419/1673)   Checking out files:  26% (435/1673)   Checking out files:  27% (452/1673)   Checking out files:  28% (469/1673)   Checking out files:  29% (486/1673)   Checking out files:  30% (502/1673)   Checking out files:  31% (519/1673)   Checking out files:  32% (536/1673)   Checking out files:  33% (553/1673)   Checking out files:  34% (569/1673)   Checking out files:  35% (586/1673)   Checking out files:  36% (603/1673)   Checking out files:  37% (620/1673)   Checking out files:  38% (636/1673)   Checking out files:  39% (653/1673)   Checking out files:  39% (658/1673)   Checking out files:  40% (670/1673)   Checking out files:  41% (686/1673)   Checking out files:  42% (703/1673)   Checking out files:  43% (720/1673)   Checking out files:  44% (737/1673)   Checking out files:  45% (753/1673)   Checking out files:  46% (770/1673)   Checking out files:  47% (787/1673)   Checking out files:  48% (804/1673)   Checking out files:  49% (820/1673)   Checking out files:  50% (837/1673)   Checking out files:  51% (854/1673)   Checking out files:  52% (870/1673)   Checking out files:  53% (887/1673)   Checking out files:  54% (904/1673)   Checking out files:  55% (921/1673)   Checking out files:  56% (937/1673)   Checking out files:  57% (954/1673)   Checking out files:  58% (971/1673)   Checking out files:  59% (988/1673)   Checking out files:  60% (1004/1673)   Checking out files:  61% (1021/1673)   Checking out files:  62% (1038/1673)   Checking out files:  63% (1054/1673)   Checking out files:  64% (1071/1673)   Checking out files:  65% (1088/1673)   Checking out files:  66% (1105/1673)   Checking out files:  67% (1121/1673)   Checking out files:  68% (1138/1673)   Checking out files:  69% (1155/1673)   Checking out files:  70% (1172/1673)   Checking out files:  71% (1188/1673)   Checking out files:  72% (1205/1673)   Checking out files:  73% (1222/1673)   Checking out files:  74% (1239/1673)   Checking out files:  75% (1255/1673)   Checking out files:  76% (1272/1673)   Checking out files:  77% (1289/1673)   Checking out files:  78% (1305/1673)   Checking out files:  79% (1322/1673)   Checking out files:  80% (1339/1673)   Checking out files:  81% (1356/1673)   Checking out files:  82% (1372/1673)   Checking out files:  83% (1389/1673)   Checking out files:  84% (1406/1673)   Checking out files:  85% (1423/1673)   Checking out files:  86% (1439/1673)   Checking out files:  87% (1456/1673)   Checking out files:  88% (1473/1673)   Checking out files:  89% (1489/1673)   Checking out files:  90% (1506/1673)   Checking out files:  91% (1523/1673)   Checking out files:  92% (1540/1673)   Checking out files:  93% (1556/1673)   Checking out files:  94% (1573/1673)   Checking out files:  95% (1590/1673)   Checking out files:  96% (1607/1673)   Checking out files:  97% (1623/1673)   Checking out files:  98% (1640/1673)   Checking out files:  99% (1657/1673)   Checking out files: 100% (1673/1673)   Checking out files: 100% (1673/1673), done.
INFO       Cache size for target "cython": 2527 MB.
You can call "clear_cache('cython')" to delete all files from the cache or manually delete files in the "/home/ng1998/.cython/brian_extensions" directory. [brian2]
INFO       Cache size for target "cython": 2526 MB.
You can call "clear_cache('cython')" to delete all files from the cache or manually delete files in the "/home/ng1998/.cython/brian_extensions" directory. [brian2.__init__]
INFO       Cache size for target "cython": 2526 MB.
You can call "clear_cache('cython')" to delete all files from the cache or manually delete files in the "/home/ng1998/.cython/brian_extensions" directory. [brian2.__init__]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:124: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  X_EMG = np.array(X_EMG)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:124: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  X_EMG = np.array(X_EMG)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:250: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_test_up = np.array(spike_times_test_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:250: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_test_up = np.array(spike_times_test_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:252: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_train_up = np.array(spike_times_train_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:252: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_train_up = np.array(spike_times_train_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/env/lib/python3.8/site-packages/numpy/core/_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  return array(a, dtype, copy=False, order=order, subok=True)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/env/lib/python3.8/site-packages/numpy/core/_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  return array(a, dtype, copy=False, order=order, subok=True)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:124: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  X_EMG = np.array(X_EMG)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:124: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  X_EMG = np.array(X_EMG)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:250: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_test_up = np.array(spike_times_test_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:250: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_test_up = np.array(spike_times_test_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:252: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_train_up = np.array(spike_times_train_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:252: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_train_up = np.array(spike_times_train_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/env/lib/python3.8/site-packages/numpy/core/_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  return array(a, dtype, copy=False, order=order, subok=True)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/env/lib/python3.8/site-packages/numpy/core/_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  return array(a, dtype, copy=False, order=order, subok=True)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:124: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  X_EMG = np.array(X_EMG)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:124: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  X_EMG = np.array(X_EMG)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:250: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_test_up = np.array(spike_times_test_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:250: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_test_up = np.array(spike_times_test_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:252: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_train_up = np.array(spike_times_train_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:252: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_train_up = np.array(spike_times_train_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/env/lib/python3.8/site-packages/numpy/core/_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  return array(a, dtype, copy=False, order=order, subok=True)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/env/lib/python3.8/site-packages/numpy/core/_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  return array(a, dtype, copy=False, order=order, subok=True)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:124: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  X_EMG = np.array(X_EMG)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:124: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  X_EMG = np.array(X_EMG)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:250: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_test_up = np.array(spike_times_test_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:250: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_test_up = np.array(spike_times_test_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:252: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_train_up = np.array(spike_times_train_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:252: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_train_up = np.array(spike_times_train_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/env/lib/python3.8/site-packages/numpy/core/_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  return array(a, dtype, copy=False, order=order, subok=True)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/env/lib/python3.8/site-packages/numpy/core/_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  return array(a, dtype, copy=False, order=order, subok=True)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/env/lib/python3.8/site-packages/scikitplot/metrics.py:405: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig, ax = plt.subplots(1, 1, figsize=figsize)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/env/lib/python3.8/site-packages/scikitplot/metrics.py:405: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig, ax = plt.subplots(1, 1, figsize=figsize)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:124: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  X_EMG = np.array(X_EMG)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:124: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  X_EMG = np.array(X_EMG)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:250: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_test_up = np.array(spike_times_test_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:250: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_test_up = np.array(spike_times_test_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:252: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_train_up = np.array(spike_times_train_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:252: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_train_up = np.array(spike_times_train_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/env/lib/python3.8/site-packages/numpy/core/_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  return array(a, dtype, copy=False, order=order, subok=True)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/env/lib/python3.8/site-packages/numpy/core/_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  return array(a, dtype, copy=False, order=order, subok=True)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:124: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  X_EMG = np.array(X_EMG)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:124: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  X_EMG = np.array(X_EMG)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:250: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_test_up = np.array(spike_times_test_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:250: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_test_up = np.array(spike_times_test_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:252: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_train_up = np.array(spike_times_train_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/EMG_exp/encode.py:252: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_train_up = np.array(spike_times_train_up)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/env/lib/python3.8/site-packages/numpy/core/_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  return array(a, dtype, copy=False, order=order, subok=True)
 [py.warnings]
WARNING    /localscratch/ng1998.64227221.0/env/lib/python3.8/site-packages/numpy/core/_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  return array(a, dtype, copy=False, order=order, subok=True)
 [py.warnings]
{'dataset': 'roshambo', 'encode_thr_up': 0.5, 'encode_thr_dn': 0.5, 'encode_refractory': 1, 'encode_interpfact': 5, 'encoded_data_file_prefix': 'encoded-emg', 'learning_algorithm': 'none', 'stdp_tau': 10, 'stdp_apre': 0.0001, 'memoryless_flag': True, 'online_flag': True, 'topology': 'custom', 'macrocolumnShape': [4, 4, 4], 'minicolumnShape': [2, 2, 1], 'connection_density': 0.6, 'wmax': 1, 'wmin': 0.01, 'winitmax': 1, 'winitmin': 1, 'win': '1', 'cbf': 1, 'lr_critical': 0.1, 'excitatoryProb': 0.8, 'adaptiveProb': 1, 'init_tau': 25, 'init_tau_dev': 0, 'init_thr': 1, 'init_thr_dev': 0, 'refractory': 2, 'tstep': 200, 'freeze_time_ms': 1, 'tstart': 0, 'tlast': 1800, 'duration': 2000, 'noise': 0, 'seed': 50, 'input_connection_density': 0.3, 'experiment_name': 'standalone', 'target': 'cython', 'dt': 1, 'fold': 3, 'classes_dict': ['rock', 'paper', 'scissor'], 'path_input_connections': 'inp.txt', 'path_res_connections': 'Conn_map.txt', 'log_file_path': None}
{'dataset': 'roshambo', 'encode_thr_up': 0.5, 'encode_thr_dn': 0.5, 'encode_refractory': 1, 'encode_interpfact': 5, 'encoded_data_file_prefix': 'encoded-emg', 'learning_algorithm': 'none', 'stdp_tau': 10, 'stdp_apre': 0.0001, 'memoryless_flag': True, 'online_flag': True, 'topology': 'custom', 'macrocolumnShape': [4, 4, 4], 'minicolumnShape': [2, 2, 1], 'connection_density': 0.6, 'wmax': 1, 'wmin': 0.01, 'winitmax': 1, 'winitmin': 1, 'win': '1', 'cbf': 1, 'lr_critical': 0.1, 'excitatoryProb': 0.8, 'adaptiveProb': 1, 'init_tau': 25, 'init_tau_dev': 0, 'init_thr': 1, 'init_thr_dev': 0, 'refractory': 2, 'tstep': 200, 'freeze_time_ms': 1, 'tstart': 0, 'tlast': 1800, 'duration': 2000, 'noise': 0, 'seed': 50, 'input_connection_density': 0.3, 'experiment_name': 'roshambo0.5511', 'target': 'cython', 'dt': 1, 'fold': 1, 'classes_dict': ['rock', 'paper', 'scissor'], 'path_input_connections': 'inp.txt', 'path_res_connections': 'Conn_map.txt', 'log_file_path': None}
Loaded subject01_session01: EMG = [(8962, 8)] // ANN = [8962]
Loaded subject01_session02: EMG = [(8933, 8)] // ANN = [8933]
Loaded subject01_session03: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject02_session01: EMG = [(8990, 8)] // ANN = [8990]
Loaded subject02_session02: EMG = [(8985, 8)] // ANN = [8985]
Loaded subject02_session03: EMG = [(8975, 8)] // ANN = [8975]
Loaded subject03_session01: EMG = [(8976, 8)] // ANN = [8976]
Loaded subject03_session02: EMG = [(8949, 8)] // ANN = [8949]
Loaded subject03_session03: EMG = [(8981, 8)] // ANN = [8981]
Loaded subject04_session01: EMG = [(8953, 8)] // ANN = [8953]
Loaded subject04_session02: EMG = [(8943, 8)] // ANN = [8943]
Loaded subject04_session03: EMG = [(8953, 8)] // ANN = [8953]
Loaded subject05_session01: EMG = [(9185, 8)] // ANN = [9185]
Loaded subject05_session02: EMG = [(9146, 8)] // ANN = [9146]
Loaded subject05_session03: EMG = [(9150, 8)] // ANN = [9150]
Loaded subject06_session01: EMG = [(8984, 8)] // ANN = [8984]
Loaded subject06_session02: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject06_session03: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject07_session01: EMG = [(8961, 8)] // ANN = [8961]
Loaded subject07_session02: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject07_session03: EMG = [(8988, 8)] // ANN = [8988]
Loaded subject08_session01: EMG = [(8948, 8)] // ANN = [8948]
Loaded subject08_session02: EMG = [(8921, 8)] // ANN = [8921]
Loaded subject08_session03: EMG = [(8954, 8)] // ANN = [8954]
Loaded subject09_session01: EMG = [(9163, 8)] // ANN = [9163]
Loaded subject09_session02: EMG = [(9149, 8)] // ANN = [9149]
Loaded subject09_session03: EMG = [(9150, 8)] // ANN = [9150]
Loaded subject10_session01: EMG = [(8983, 8)] // ANN = [8983]
Loaded subject10_session02: EMG = [(8951, 8)] // ANN = [8951]
Loaded subject10_session03: EMG = [(8988, 8)] // ANN = [8988]
Done sorting trials!
All good!
Number of samples in dataset:
450
450
Class labels:
[0, 1, 2]
Subjects : 
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Sessions : 
[1, 2, 3]
Trials per session : 
[0, 1, 2, 3, 4]
Average spiking rate
115.03354166666665
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
Number of Train samples : 
3000
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
Number of Test samples : 
1500
Input test accuraccy
0.786
Baseline accuraccy
0.5726666666666667
{'dataset': 'roshambo', 'encode_thr_up': 0.5, 'encode_thr_dn': 0.5, 'encode_refractory': 1, 'encode_interpfact': 5, 'encoded_data_file_prefix': 'encoded-emg', 'learning_algorithm': 'none', 'stdp_tau': 10, 'stdp_apre': 0.0001, 'memoryless_flag': True, 'online_flag': True, 'topology': 'custom', 'macrocolumnShape': [4, 4, 4], 'minicolumnShape': [2, 2, 1], 'connection_density': 0.6, 'wmax': 1, 'wmin': 0.01, 'winitmax': 1, 'winitmin': 1, 'win': '1', 'cbf': 1, 'lr_critical': 0.1, 'excitatoryProb': 0.8, 'adaptiveProb': 1, 'init_tau': 25, 'init_tau_dev': 0, 'init_thr': 1, 'init_thr_dev': 0, 'refractory': 2, 'tstep': 200, 'freeze_time_ms': 1, 'tstart': 0, 'tlast': 1800, 'duration': 2000, 'noise': 0, 'seed': 50, 'input_connection_density': 0.3, 'experiment_name': 'roshambo0.5512', 'target': 'cython', 'dt': 1, 'fold': 2, 'classes_dict': ['rock', 'paper', 'scissor'], 'path_input_connections': 'inp.txt', 'path_res_connections': 'Conn_map.txt', 'log_file_path': None}
Loaded subject01_session01: EMG = [(8962, 8)] // ANN = [8962]
Loaded subject01_session02: EMG = [(8933, 8)] // ANN = [8933]
Loaded subject01_session03: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject02_session01: EMG = [(8990, 8)] // ANN = [8990]
Loaded subject02_session02: EMG = [(8985, 8)] // ANN = [8985]
Loaded subject02_session03: EMG = [(8975, 8)] // ANN = [8975]
Loaded subject03_session01: EMG = [(8976, 8)] // ANN = [8976]
Loaded subject03_session02: EMG = [(8949, 8)] // ANN = [8949]
Loaded subject03_session03: EMG = [(8981, 8)] // ANN = [8981]
Loaded subject04_session01: EMG = [(8953, 8)] // ANN = [8953]
Loaded subject04_session02: EMG = [(8943, 8)] // ANN = [8943]
Loaded subject04_session03: EMG = [(8953, 8)] // ANN = [8953]
Loaded subject05_session01: EMG = [(9185, 8)] // ANN = [9185]
Loaded subject05_session02: EMG = [(9146, 8)] // ANN = [9146]
Loaded subject05_session03: EMG = [(9150, 8)] // ANN = [9150]
Loaded subject06_session01: EMG = [(8984, 8)] // ANN = [8984]
Loaded subject06_session02: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject06_session03: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject07_session01: EMG = [(8961, 8)] // ANN = [8961]
Loaded subject07_session02: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject07_session03: EMG = [(8988, 8)] // ANN = [8988]
Loaded subject08_session01: EMG = [(8948, 8)] // ANN = [8948]
Loaded subject08_session02: EMG = [(8921, 8)] // ANN = [8921]
Loaded subject08_session03: EMG = [(8954, 8)] // ANN = [8954]
Loaded subject09_session01: EMG = [(9163, 8)] // ANN = [9163]
Loaded subject09_session02: EMG = [(9149, 8)] // ANN = [9149]
Loaded subject09_session03: EMG = [(9150, 8)] // ANN = [9150]
Loaded subject10_session01: EMG = [(8983, 8)] // ANN = [8983]
Loaded subject10_session02: EMG = [(8951, 8)] // ANN = [8951]
Loaded subject10_session03: EMG = [(8988, 8)] // ANN = [8988]
Done sorting trials!
All good!
Number of samples in dataset:
450
450
Class labels:
[0, 1, 2]
Subjects : 
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Sessions : 
[1, 2, 3]
Trials per session : 
[0, 1, 2, 3, 4]
Average spiking rate
116.393125
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
Number of Train samples : 
3000
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
Number of Test samples : 
1500
Input test accuraccy
0.79
Baseline accuraccy
0.582
{'dataset': 'roshambo', 'encode_thr_up': 0.5, 'encode_thr_dn': 0.5, 'encode_refractory': 1, 'encode_interpfact': 5, 'encoded_data_file_prefix': 'encoded-emg', 'learning_algorithm': 'none', 'stdp_tau': 10, 'stdp_apre': 0.0001, 'memoryless_flag': True, 'online_flag': True, 'topology': 'custom', 'macrocolumnShape': [4, 4, 4], 'minicolumnShape': [2, 2, 1], 'connection_density': 0.6, 'wmax': 1, 'wmin': 0.01, 'winitmax': 1, 'winitmin': 1, 'win': '1', 'cbf': 1, 'lr_critical': 0.1, 'excitatoryProb': 0.8, 'adaptiveProb': 1, 'init_tau': 25, 'init_tau_dev': 0, 'init_thr': 1, 'init_thr_dev': 0, 'refractory': 2, 'tstep': 200, 'freeze_time_ms': 1, 'tstart': 0, 'tlast': 1800, 'duration': 2000, 'noise': 0, 'seed': 50, 'input_connection_density': 0.3, 'experiment_name': 'roshambo0.5513', 'target': 'cython', 'dt': 1, 'fold': 3, 'classes_dict': ['rock', 'paper', 'scissor'], 'path_input_connections': 'inp.txt', 'path_res_connections': 'Conn_map.txt', 'log_file_path': None}
Loaded subject01_session01: EMG = [(8962, 8)] // ANN = [8962]
Loaded subject01_session02: EMG = [(8933, 8)] // ANN = [8933]
Loaded subject01_session03: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject02_session01: EMG = [(8990, 8)] // ANN = [8990]
Loaded subject02_session02: EMG = [(8985, 8)] // ANN = [8985]
Loaded subject02_session03: EMG = [(8975, 8)] // ANN = [8975]
Loaded subject03_session01: EMG = [(8976, 8)] // ANN = [8976]
Loaded subject03_session02: EMG = [(8949, 8)] // ANN = [8949]
Loaded subject03_session03: EMG = [(8981, 8)] // ANN = [8981]
Loaded subject04_session01: EMG = [(8953, 8)] // ANN = [8953]
Loaded subject04_session02: EMG = [(8943, 8)] // ANN = [8943]
Loaded subject04_session03: EMG = [(8953, 8)] // ANN = [8953]
Loaded subject05_session01: EMG = [(9185, 8)] // ANN = [9185]
Loaded subject05_session02: EMG = [(9146, 8)] // ANN = [9146]
Loaded subject05_session03: EMG = [(9150, 8)] // ANN = [9150]
Loaded subject06_session01: EMG = [(8984, 8)] // ANN = [8984]
Loaded subject06_session02: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject06_session03: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject07_session01: EMG = [(8961, 8)] // ANN = [8961]
Loaded subject07_session02: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject07_session03: EMG = [(8988, 8)] // ANN = [8988]
Loaded subject08_session01: EMG = [(8948, 8)] // ANN = [8948]
Loaded subject08_session02: EMG = [(8921, 8)] // ANN = [8921]
Loaded subject08_session03: EMG = [(8954, 8)] // ANN = [8954]
Loaded subject09_session01: EMG = [(9163, 8)] // ANN = [9163]
Loaded subject09_session02: EMG = [(9149, 8)] // ANN = [9149]
Loaded subject09_session03: EMG = [(9150, 8)] // ANN = [9150]
Loaded subject10_session01: EMG = [(8983, 8)] // ANN = [8983]
Loaded subject10_session02: EMG = [(8951, 8)] // ANN = [8951]
Loaded subject10_session03: EMG = [(8988, 8)] // ANN = [8988]
Done sorting trials!
All good!
Number of samples in dataset:
450
450
Class labels:
[0, 1, 2]
Subjects : 
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Sessions : 
[1, 2, 3]
Trials per session : 
[0, 1, 2, 3, 4]
Average spiking rate
116.95500000000001
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
Number of Train samples : 
3000
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
Number of Test samples : 
1500
Input test accuraccy
0.796
Baseline accuraccy
0.5693333333333334
{'dataset': '5_class', 'encode_thr_up': 0.5, 'encode_thr_dn': 0.5, 'encode_refractory': 1, 'encode_interpfact': 5, 'encoded_data_file_prefix': 'encoded-emg', 'learning_algorithm': 'none', 'stdp_tau': 10, 'stdp_apre': 0.0001, 'memoryless_flag': True, 'online_flag': True, 'topology': 'custom', 'macrocolumnShape': [4, 4, 4], 'minicolumnShape': [2, 2, 1], 'connection_density': 0.6, 'wmax': 1, 'wmin': 0.01, 'winitmax': 1, 'winitmin': 1, 'win': '1', 'cbf': 1, 'lr_critical': 0.1, 'excitatoryProb': 0.8, 'adaptiveProb': 1, 'init_tau': 25, 'init_tau_dev': 0, 'init_thr': 1, 'init_thr_dev': 0, 'refractory': 2, 'tstep': 200, 'freeze_time_ms': 1, 'tstart': 0, 'tlast': 1800, 'duration': 2000, 'noise': 0, 'seed': 50, 'input_connection_density': 0.3, 'experiment_name': '5_class0.5511', 'target': 'cython', 'dt': 1, 'fold': 1, 'classes_dict': ['rock', 'paper', 'scissor'], 'path_input_connections': 'inp.txt', 'path_res_connections': 'Conn_map.txt', 'log_file_path': None}
Loaded subject01_session01: EMG = [(25290, 8)] // ANN = [25290]
Loaded subject01_session02: EMG = [(25089, 8)] // ANN = [25089]
Loaded subject01_session03: EMG = [(25244, 8)] // ANN = [25244]
Loaded subject02_session01: EMG = [(25077, 8)] // ANN = [25077]
Loaded subject02_session02: EMG = [(25331, 8)] // ANN = [25331]
Loaded subject02_session03: EMG = [(25318, 8)] // ANN = [25318]
Loaded subject03_session01: EMG = [(25315, 8)] // ANN = [25315]
Loaded subject03_session02: EMG = [(25306, 8)] // ANN = [25306]
Loaded subject03_session03: EMG = [(25328, 8)] // ANN = [25328]
Loaded subject04_session01: EMG = [(25315, 8)] // ANN = [25315]
Loaded subject04_session02: EMG = [(25328, 8)] // ANN = [25328]
Loaded subject04_session03: EMG = [(25242, 8)] // ANN = [25242]
Loaded subject05_session01: EMG = [(25358, 8)] // ANN = [25358]
Loaded subject05_session02: EMG = [(25330, 8)] // ANN = [25330]
Loaded subject05_session03: EMG = [(25332, 8)] // ANN = [25332]
Loaded subject06_session01: EMG = [(24993, 8)] // ANN = [24993]
Loaded subject06_session02: EMG = [(24850, 8)] // ANN = [24850]
Loaded subject06_session03: EMG = [(24903, 8)] // ANN = [24903]
Loaded subject07_session01: EMG = [(25324, 8)] // ANN = [25324]
Loaded subject07_session02: EMG = [(25304, 8)] // ANN = [25304]
Loaded subject07_session03: EMG = [(25240, 8)] // ANN = [25240]
Loaded subject08_session01: EMG = [(25294, 8)] // ANN = [25294]
Loaded subject08_session02: EMG = [(25318, 8)] // ANN = [25318]
Loaded subject08_session03: EMG = [(25328, 8)] // ANN = [25328]
Loaded subject09_session01: EMG = [(25140, 8)] // ANN = [25140]
Loaded subject09_session02: EMG = [(23455, 8)] // ANN = [23455]
Loaded subject09_session03: EMG = [(25169, 8)] // ANN = [25169]
Loaded subject10_session01: EMG = [(25339, 8)] // ANN = [25339]
Loaded subject10_session02: EMG = [(25318, 8)] // ANN = [25318]
Loaded subject10_session03: EMG = [(25324, 8)] // ANN = [25324]
Loaded subject11_session01: EMG = [(21970, 8)] // ANN = [21970]
Loaded subject11_session02: EMG = [(21382, 8)] // ANN = [21382]
Loaded subject11_session03: EMG = [(21942, 8)] // ANN = [21942]
Loaded subject12_session01: EMG = [(25400, 8)] // ANN = [25400]
Loaded subject12_session02: EMG = [(25362, 8)] // ANN = [25362]
Loaded subject12_session03: EMG = [(25382, 8)] // ANN = [25382]
Loaded subject13_session01: EMG = [(25329, 8)] // ANN = [25329]
Loaded subject13_session02: EMG = [(25378, 8)] // ANN = [25378]
Loaded subject13_session03: EMG = [(25382, 8)] // ANN = [25382]
Loaded subject14_session01: EMG = [(25366, 8)] // ANN = [25366]
Loaded subject14_session02: EMG = [(25388, 8)] // ANN = [25388]
Loaded subject14_session03: EMG = [(25362, 8)] // ANN = [25362]
Loaded subject15_session01: EMG = [(25372, 8)] // ANN = [25372]
Loaded subject15_session02: EMG = [(25348, 8)] // ANN = [25348]
Loaded subject15_session03: EMG = [(25374, 8)] // ANN = [25374]
Loaded subject16_session01: EMG = [(25403, 8)] // ANN = [25403]
Loaded subject16_session02: EMG = [(25371, 8)] // ANN = [25371]
Loaded subject16_session03: EMG = [(25368, 8)] // ANN = [25368]
Loaded subject17_session01: EMG = [(25363, 8)] // ANN = [25363]
Loaded subject17_session02: EMG = [(25374, 8)] // ANN = [25374]
Loaded subject17_session03: EMG = [(25369, 8)] // ANN = [25369]
Loaded subject18_session01: EMG = [(25416, 8)] // ANN = [25416]
Loaded subject18_session02: EMG = [(25376, 8)] // ANN = [25376]
Loaded subject18_session03: EMG = [(25442, 8)] // ANN = [25442]
Loaded subject19_session01: EMG = [(21244, 8)] // ANN = [21244]
Loaded subject19_session02: EMG = [(21834, 8)] // ANN = [21834]
Loaded subject19_session03: EMG = [(25378, 8)] // ANN = [25378]
Loaded subject20_session01: EMG = [(21993, 8)] // ANN = [21993]
Loaded subject20_session02: EMG = [(22297, 8)] // ANN = [22297]
Loaded subject20_session03: EMG = [(21955, 8)] // ANN = [21955]
Loaded subject21_session01: EMG = [(25396, 8)] // ANN = [25396]
Loaded subject21_session02: EMG = [(25378, 8)] // ANN = [25378]
Loaded subject21_session03: EMG = [(25370, 8)] // ANN = [25370]
Done sorting trials!
All good!
Number of samples in dataset:
1575
1575
Class labels:
[0, 1, 2, 3, 4]
Subjects : 
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
Sessions : 
[1, 2, 3]
Trials per session : 
[0, 1, 2, 3, 4]
Average spiking rate
124.43354166666667
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
822
823
824
825
826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964
965
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
984
985
986
987
988
989
990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044
1045
1046
1047
1048
1049
Number of Train samples : 
10500
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
Number of Test samples : 
5250
Input test accuraccy
0.6201904761904762
Baseline accuraccy
0.31352380952380954
{'dataset': '5_class', 'encode_thr_up': 0.5, 'encode_thr_dn': 0.5, 'encode_refractory': 1, 'encode_interpfact': 5, 'encoded_data_file_prefix': 'encoded-emg', 'learning_algorithm': 'none', 'stdp_tau': 10, 'stdp_apre': 0.0001, 'memoryless_flag': True, 'online_flag': True, 'topology': 'custom', 'macrocolumnShape': [4, 4, 4], 'minicolumnShape': [2, 2, 1], 'connection_density': 0.6, 'wmax': 1, 'wmin': 0.01, 'winitmax': 1, 'winitmin': 1, 'win': '1', 'cbf': 1, 'lr_critical': 0.1, 'excitatoryProb': 0.8, 'adaptiveProb': 1, 'init_tau': 25, 'init_tau_dev': 0, 'init_thr': 1, 'init_thr_dev': 0, 'refractory': 2, 'tstep': 200, 'freeze_time_ms': 1, 'tstart': 0, 'tlast': 1800, 'duration': 2000, 'noise': 0, 'seed': 50, 'input_connection_density': 0.3, 'experiment_name': '5_class0.5512', 'target': 'cython', 'dt': 1, 'fold': 2, 'classes_dict': ['pinky', 'elle', 'yo', 'index', 'thumb'], 'path_input_connections': 'inp.txt', 'path_res_connections': 'Conn_map.txt', 'log_file_path': None}
Loaded subject01_session01: EMG = [(25290, 8)] // ANN = [25290]
Loaded subject01_session02: EMG = [(25089, 8)] // ANN = [25089]
Loaded subject01_session03: EMG = [(25244, 8)] // ANN = [25244]
Loaded subject02_session01: EMG = [(25077, 8)] // ANN = [25077]
Loaded subject02_session02: EMG = [(25331, 8)] // ANN = [25331]
Loaded subject02_session03: EMG = [(25318, 8)] // ANN = [25318]
Loaded subject03_session01: EMG = [(25315, 8)] // ANN = [25315]
Loaded subject03_session02: EMG = [(25306, 8)] // ANN = [25306]
Loaded subject03_session03: EMG = [(25328, 8)] // ANN = [25328]
Loaded subject04_session01: EMG = [(25315, 8)] // ANN = [25315]
Loaded subject04_session02: EMG = [(25328, 8)] // ANN = [25328]
Loaded subject04_session03: EMG = [(25242, 8)] // ANN = [25242]
Loaded subject05_session01: EMG = [(25358, 8)] // ANN = [25358]
Loaded subject05_session02: EMG = [(25330, 8)] // ANN = [25330]
Loaded subject05_session03: EMG = [(25332, 8)] // ANN = [25332]
Loaded subject06_session01: EMG = [(24993, 8)] // ANN = [24993]
Loaded subject06_session02: EMG = [(24850, 8)] // ANN = [24850]
Loaded subject06_session03: EMG = [(24903, 8)] // ANN = [24903]
Loaded subject07_session01: EMG = [(25324, 8)] // ANN = [25324]
Loaded subject07_session02: EMG = [(25304, 8)] // ANN = [25304]
Loaded subject07_session03: EMG = [(25240, 8)] // ANN = [25240]
Loaded subject08_session01: EMG = [(25294, 8)] // ANN = [25294]
Loaded subject08_session02: EMG = [(25318, 8)] // ANN = [25318]
Loaded subject08_session03: EMG = [(25328, 8)] // ANN = [25328]
Loaded subject09_session01: EMG = [(25140, 8)] // ANN = [25140]
Loaded subject09_session02: EMG = [(23455, 8)] // ANN = [23455]
Loaded subject09_session03: EMG = [(25169, 8)] // ANN = [25169]
Loaded subject10_session01: EMG = [(25339, 8)] // ANN = [25339]
Loaded subject10_session02: EMG = [(25318, 8)] // ANN = [25318]
Loaded subject10_session03: EMG = [(25324, 8)] // ANN = [25324]
Loaded subject11_session01: EMG = [(21970, 8)] // ANN = [21970]
Loaded subject11_session02: EMG = [(21382, 8)] // ANN = [21382]
Loaded subject11_session03: EMG = [(21942, 8)] // ANN = [21942]
Loaded subject12_session01: EMG = [(25400, 8)] // ANN = [25400]
Loaded subject12_session02: EMG = [(25362, 8)] // ANN = [25362]
Loaded subject12_session03: EMG = [(25382, 8)] // ANN = [25382]
Loaded subject13_session01: EMG = [(25329, 8)] // ANN = [25329]
Loaded subject13_session02: EMG = [(25378, 8)] // ANN = [25378]
Loaded subject13_session03: EMG = [(25382, 8)] // ANN = [25382]
Loaded subject14_session01: EMG = [(25366, 8)] // ANN = [25366]
Loaded subject14_session02: EMG = [(25388, 8)] // ANN = [25388]
Loaded subject14_session03: EMG = [(25362, 8)] // ANN = [25362]
Loaded subject15_session01: EMG = [(25372, 8)] // ANN = [25372]
Loaded subject15_session02: EMG = [(25348, 8)] // ANN = [25348]
Loaded subject15_session03: EMG = [(25374, 8)] // ANN = [25374]
Loaded subject16_session01: EMG = [(25403, 8)] // ANN = [25403]
Loaded subject16_session02: EMG = [(25371, 8)] // ANN = [25371]
Loaded subject16_session03: EMG = [(25368, 8)] // ANN = [25368]
Loaded subject17_session01: EMG = [(25363, 8)] // ANN = [25363]
Loaded subject17_session02: EMG = [(25374, 8)] // ANN = [25374]
Loaded subject17_session03: EMG = [(25369, 8)] // ANN = [25369]
Loaded subject18_session01: EMG = [(25416, 8)] // ANN = [25416]
Loaded subject18_session02: EMG = [(25376, 8)] // ANN = [25376]
Loaded subject18_session03: EMG = [(25442, 8)] // ANN = [25442]
Loaded subject19_session01: EMG = [(21244, 8)] // ANN = [21244]
Loaded subject19_session02: EMG = [(21834, 8)] // ANN = [21834]
Loaded subject19_session03: EMG = [(25378, 8)] // ANN = [25378]
Loaded subject20_session01: EMG = [(21993, 8)] // ANN = [21993]
Loaded subject20_session02: EMG = [(22297, 8)] // ANN = [22297]
Loaded subject20_session03: EMG = [(21955, 8)] // ANN = [21955]
Loaded subject21_session01: EMG = [(25396, 8)] // ANN = [25396]
Loaded subject21_session02: EMG = [(25378, 8)] // ANN = [25378]
Loaded subject21_session03: EMG = [(25370, 8)] // ANN = [25370]
Done sorting trials!
All good!
Number of samples in dataset:
1575
1575
Class labels:
[0, 1, 2, 3, 4]
Subjects : 
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
Sessions : 
[1, 2, 3]
Trials per session : 
[0, 1, 2, 3, 4]
Average spiking rate
124.34946428571428
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
822
823
824
825
826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964
965
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
984
985
986
987
988
989
990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044
1045
1046
1047
1048
1049
Number of Train samples : 
10500
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
Number of Test samples : 
5250
Input test accuraccy
0.6845714285714286
Baseline accuraccy
0.31961904761904764
{'dataset': '5_class', 'encode_thr_up': 0.5, 'encode_thr_dn': 0.5, 'encode_refractory': 1, 'encode_interpfact': 5, 'encoded_data_file_prefix': 'encoded-emg', 'learning_algorithm': 'none', 'stdp_tau': 10, 'stdp_apre': 0.0001, 'memoryless_flag': True, 'online_flag': True, 'topology': 'custom', 'macrocolumnShape': [4, 4, 4], 'minicolumnShape': [2, 2, 1], 'connection_density': 0.6, 'wmax': 1, 'wmin': 0.01, 'winitmax': 1, 'winitmin': 1, 'win': '1', 'cbf': 1, 'lr_critical': 0.1, 'excitatoryProb': 0.8, 'adaptiveProb': 1, 'init_tau': 25, 'init_tau_dev': 0, 'init_thr': 1, 'init_thr_dev': 0, 'refractory': 2, 'tstep': 200, 'freeze_time_ms': 1, 'tstart': 0, 'tlast': 1800, 'duration': 2000, 'noise': 0, 'seed': 50, 'input_connection_density': 0.3, 'experiment_name': '5_class0.5513', 'target': 'cython', 'dt': 1, 'fold': 3, 'classes_dict': ['pinky', 'elle', 'yo', 'index', 'thumb'], 'path_input_connections': 'inp.txt', 'path_res_connections': 'Conn_map.txt', 'log_file_path': None}
Loaded subject01_session01: EMG = [(25290, 8)] // ANN = [25290]
Loaded subject01_session02: EMG = [(25089, 8)] // ANN = [25089]
Loaded subject01_session03: EMG = [(25244, 8)] // ANN = [25244]
Loaded subject02_session01: EMG = [(25077, 8)] // ANN = [25077]
Loaded subject02_session02: EMG = [(25331, 8)] // ANN = [25331]
Loaded subject02_session03: EMG = [(25318, 8)] // ANN = [25318]
Loaded subject03_session01: EMG = [(25315, 8)] // ANN = [25315]
Loaded subject03_session02: EMG = [(25306, 8)] // ANN = [25306]
Loaded subject03_session03: EMG = [(25328, 8)] // ANN = [25328]
Loaded subject04_session01: EMG = [(25315, 8)] // ANN = [25315]
Loaded subject04_session02: EMG = [(25328, 8)] // ANN = [25328]
Loaded subject04_session03: EMG = [(25242, 8)] // ANN = [25242]
Loaded subject05_session01: EMG = [(25358, 8)] // ANN = [25358]
Loaded subject05_session02: EMG = [(25330, 8)] // ANN = [25330]
Loaded subject05_session03: EMG = [(25332, 8)] // ANN = [25332]
Loaded subject06_session01: EMG = [(24993, 8)] // ANN = [24993]
Loaded subject06_session02: EMG = [(24850, 8)] // ANN = [24850]
Loaded subject06_session03: EMG = [(24903, 8)] // ANN = [24903]
Loaded subject07_session01: EMG = [(25324, 8)] // ANN = [25324]
Loaded subject07_session02: EMG = [(25304, 8)] // ANN = [25304]
Loaded subject07_session03: EMG = [(25240, 8)] // ANN = [25240]
Loaded subject08_session01: EMG = [(25294, 8)] // ANN = [25294]
Loaded subject08_session02: EMG = [(25318, 8)] // ANN = [25318]
Loaded subject08_session03: EMG = [(25328, 8)] // ANN = [25328]
Loaded subject09_session01: EMG = [(25140, 8)] // ANN = [25140]
Loaded subject09_session02: EMG = [(23455, 8)] // ANN = [23455]
Loaded subject09_session03: EMG = [(25169, 8)] // ANN = [25169]
Loaded subject10_session01: EMG = [(25339, 8)] // ANN = [25339]
Loaded subject10_session02: EMG = [(25318, 8)] // ANN = [25318]
Loaded subject10_session03: EMG = [(25324, 8)] // ANN = [25324]
Loaded subject11_session01: EMG = [(21970, 8)] // ANN = [21970]
Loaded subject11_session02: EMG = [(21382, 8)] // ANN = [21382]
Loaded subject11_session03: EMG = [(21942, 8)] // ANN = [21942]
Loaded subject12_session01: EMG = [(25400, 8)] // ANN = [25400]
Loaded subject12_session02: EMG = [(25362, 8)] // ANN = [25362]
Loaded subject12_session03: EMG = [(25382, 8)] // ANN = [25382]
Loaded subject13_session01: EMG = [(25329, 8)] // ANN = [25329]
Loaded subject13_session02: EMG = [(25378, 8)] // ANN = [25378]
Loaded subject13_session03: EMG = [(25382, 8)] // ANN = [25382]
Loaded subject14_session01: EMG = [(25366, 8)] // ANN = [25366]
Loaded subject14_session02: EMG = [(25388, 8)] // ANN = [25388]
Loaded subject14_session03: EMG = [(25362, 8)] // ANN = [25362]
Loaded subject15_session01: EMG = [(25372, 8)] // ANN = [25372]
Loaded subject15_session02: EMG = [(25348, 8)] // ANN = [25348]
Loaded subject15_session03: EMG = [(25374, 8)] // ANN = [25374]
Loaded subject16_session01: EMG = [(25403, 8)] // ANN = [25403]
Loaded subject16_session02: EMG = [(25371, 8)] // ANN = [25371]
Loaded subject16_session03: EMG = [(25368, 8)] // ANN = [25368]
Loaded subject17_session01: EMG = [(25363, 8)] // ANN = [25363]
Loaded subject17_session02: EMG = [(25374, 8)] // ANN = [25374]
Loaded subject17_session03: EMG = [(25369, 8)] // ANN = [25369]
Loaded subject18_session01: EMG = [(25416, 8)] // ANN = [25416]
Loaded subject18_session02: EMG = [(25376, 8)] // ANN = [25376]
Loaded subject18_session03: EMG = [(25442, 8)] // ANN = [25442]
Loaded subject19_session01: EMG = [(21244, 8)] // ANN = [21244]
Loaded subject19_session02: EMG = [(21834, 8)] // ANN = [21834]
Loaded subject19_session03: EMG = [(25378, 8)] // ANN = [25378]
Loaded subject20_session01: EMG = [(21993, 8)] // ANN = [21993]
Loaded subject20_session02: EMG = [(22297, 8)] // ANN = [22297]
Loaded subject20_session03: EMG = [(21955, 8)] // ANN = [21955]
Loaded subject21_session01: EMG = [(25396, 8)] // ANN = [25396]
Loaded subject21_session02: EMG = [(25378, 8)] // ANN = [25378]
Loaded subject21_session03: EMG = [(25370, 8)] // ANN = [25370]
Done sorting trials!
All good!
Number of samples in dataset:
1575
1575
Class labels:
[0, 1, 2, 3, 4]
Subjects : 
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
Sessions : 
[1, 2, 3]
Trials per session : 
[0, 1, 2, 3, 4]
Average spiking rate
124.86616071428571
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
822
823
824
825
826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964
965
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
984
985
986
987
988
989
990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044
1045
1046
1047
1048
1049
Number of Train samples : 
10500
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
Number of Test samples : 
5250
Input test accuraccy
0.6476190476190476
Baseline accuraccy
0.3339047619047619
  File "experiment_exploration_v7.py", line 77
    ,lr_critical = [0.05,0.06,0.08,0.9,0.1,0.11,0.12,0.13,0.14.0.15]
                                                              ^
SyntaxError: invalid syntax
