Using base prefix '/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/python/3.8.2'
New python executable in /localscratch/ng1998.62331521.0/env/bin/python
Installing setuptools, pip, wheel...
done.
Ignoring pip: markers 'python_version < "3"' don't match your environment
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/generic/scipy-1.5.2-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/generic/numpy-1.19.1-cp38-cp38-linux_x86_64.whl
Installing collected packages: numpy, scipy
Successfully installed numpy-1.19.1 scipy-1.5.2
Ignoring pip: markers 'python_version < "3"' don't match your environment
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pandas-1.1.3-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pytz-2021.1-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/python_dateutil-2.8.1-py2.py3-none-any.whl
Requirement already satisfied: numpy>=1.15.4 in ./env/lib/python3.8/site-packages (from pandas) (1.19.1)
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/six-1.15.0-py2.py3-none-any.whl
Installing collected packages: pytz, six, python-dateutil, pandas
Successfully installed pandas-1.1.3 python-dateutil-2.8.1 pytz-2021.1 six-1.15.0
Ignoring pip: markers 'python_version < "3"' don't match your environment
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/matplotlib-3.3.2-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/avx2/kiwisolver-1.3.1-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/certifi-2020.12.5-py2.py3-none-any.whl
Requirement already satisfied: python-dateutil>=2.1 in ./env/lib/python3.8/site-packages (from matplotlib) (2.8.1)
Requirement already satisfied: numpy>=1.15 in ./env/lib/python3.8/site-packages (from matplotlib) (1.19.1)
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/generic/Pillow-7.2.0-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pyparsing-2.4.7-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/cycler-0.10.0-py3-none-any.whl
Requirement already satisfied: six>=1.5 in ./env/lib/python3.8/site-packages (from python-dateutil>=2.1->matplotlib) (1.15.0)
Installing collected packages: kiwisolver, certifi, pillow, pyparsing, cycler, matplotlib
Successfully installed certifi-2020.12.5 cycler-0.10.0 kiwisolver-1.3.1 matplotlib-3.3.2 pillow-7.2.0 pyparsing-2.4.7
Ignoring pip: markers 'python_version < "3"' don't match your environment
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/seaborn-0.11.1-py3-none-any.whl
Requirement already satisfied: pandas>=0.23 in ./env/lib/python3.8/site-packages (from seaborn) (1.1.3)
Requirement already satisfied: matplotlib>=2.2 in ./env/lib/python3.8/site-packages (from seaborn) (3.3.2)
Requirement already satisfied: scipy>=1.0 in ./env/lib/python3.8/site-packages (from seaborn) (1.5.2)
Requirement already satisfied: numpy>=1.15 in ./env/lib/python3.8/site-packages (from seaborn) (1.19.1)
Requirement already satisfied: python-dateutil>=2.7.3 in ./env/lib/python3.8/site-packages (from pandas>=0.23->seaborn) (2.8.1)
Requirement already satisfied: pytz>=2017.2 in ./env/lib/python3.8/site-packages (from pandas>=0.23->seaborn) (2021.1)
Requirement already satisfied: cycler>=0.10 in ./env/lib/python3.8/site-packages (from matplotlib>=2.2->seaborn) (0.10.0)
Requirement already satisfied: pillow>=6.2.0 in ./env/lib/python3.8/site-packages (from matplotlib>=2.2->seaborn) (7.2.0)
Requirement already satisfied: kiwisolver>=1.0.1 in ./env/lib/python3.8/site-packages (from matplotlib>=2.2->seaborn) (1.3.1)
Requirement already satisfied: certifi>=2020.06.20 in ./env/lib/python3.8/site-packages (from matplotlib>=2.2->seaborn) (2020.12.5)
Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in ./env/lib/python3.8/site-packages (from matplotlib>=2.2->seaborn) (2.4.7)
Requirement already satisfied: six>=1.5 in ./env/lib/python3.8/site-packages (from python-dateutil>=2.7.3->pandas>=0.23->seaborn) (1.15.0)
Installing collected packages: seaborn
Successfully installed seaborn-0.11.1
Ignoring pip: markers 'python_version < "3"' don't match your environment
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Collecting Brian2
  Using cached https://files.pythonhosted.org/packages/9a/c7/565012c479953d041d5e828938515d3c402d0c3f4942180f1c44cb0f472e/Brian2-2.4.2.tar.gz
Requirement already satisfied: numpy>=1.15 in ./env/lib/python3.8/site-packages (from Brian2) (1.19.1)
Collecting cython>=0.29
  Using cached https://files.pythonhosted.org/packages/9e/98/bff39b3acaebbc6102be71797f655bbe60738f7339db4ad7bd0772c08daf/Cython-0.29.22-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/sympy-1.7.1-py3-none-any.whl
Requirement already satisfied: pyparsing in ./env/lib/python3.8/site-packages (from Brian2) (2.4.7)
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/Jinja2-2.11.3-py2.py3-none-any.whl
Requirement already satisfied: setuptools>=24.2 in ./env/lib/python3.8/site-packages (from Brian2) (41.4.0)
Collecting mpmath>=0.19
  Using cached https://files.pythonhosted.org/packages/d4/cf/3965bddbb4f1a61c49aacae0e78fd1fe36b5dc36c797b31f30cf07dcbbb7/mpmath-1.2.1-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/MarkupSafe-1.1.1-cp38-cp38-linux_x86_64.whl
Building wheels for collected packages: Brian2
  Building wheel for Brian2 (setup.py): started
  Building wheel for Brian2 (setup.py): finished with status 'done'
  Created wheel for Brian2: filename=Brian2-2.4.2-cp38-cp38-linux_x86_64.whl size=1308050 sha256=a0f72ac6fb5b266b025b4903e4c505255a73cc2f29200aa23ce89a1a3c4aaa25
  Stored in directory: /home/ng1998/.cache/pip/wheels/5d/4b/cf/ef50e71df5479d67f981cbb17b1d842381019d27ba144d57de
Successfully built Brian2
Installing collected packages: cython, mpmath, sympy, MarkupSafe, jinja2, Brian2
Successfully installed Brian2-2.4.2 MarkupSafe-1.1.1 cython-0.29.22 jinja2-2.11.3 mpmath-1.2.1 sympy-1.7.1
Ignoring pip: markers 'python_version < "3"' don't match your environment
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Collecting scikit_plot
  Using cached https://files.pythonhosted.org/packages/7c/47/32520e259340c140a4ad27c1b97050dd3254fdc517b1d59974d47037510e/scikit_plot-0.3.7-py3-none-any.whl
Requirement already satisfied: scipy>=0.9 in ./env/lib/python3.8/site-packages (from scikit_plot) (1.5.2)
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/scikit_learn-0.23.0-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/joblib-1.0.1-py3-none-any.whl
Requirement already satisfied: matplotlib>=1.4.0 in ./env/lib/python3.8/site-packages (from scikit_plot) (3.3.2)
Requirement already satisfied: numpy>=1.14.5 in ./env/lib/python3.8/site-packages (from scipy>=0.9->scikit_plot) (1.19.1)
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/threadpoolctl-2.1.0-py3-none-any.whl
Requirement already satisfied: pillow>=6.2.0 in ./env/lib/python3.8/site-packages (from matplotlib>=1.4.0->scikit_plot) (7.2.0)
Requirement already satisfied: certifi>=2020.06.20 in ./env/lib/python3.8/site-packages (from matplotlib>=1.4.0->scikit_plot) (2020.12.5)
Requirement already satisfied: cycler>=0.10 in ./env/lib/python3.8/site-packages (from matplotlib>=1.4.0->scikit_plot) (0.10.0)
Requirement already satisfied: kiwisolver>=1.0.1 in ./env/lib/python3.8/site-packages (from matplotlib>=1.4.0->scikit_plot) (1.3.1)
Requirement already satisfied: python-dateutil>=2.1 in ./env/lib/python3.8/site-packages (from matplotlib>=1.4.0->scikit_plot) (2.8.1)
Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in ./env/lib/python3.8/site-packages (from matplotlib>=1.4.0->scikit_plot) (2.4.7)
Requirement already satisfied: six in ./env/lib/python3.8/site-packages (from cycler>=0.10->matplotlib>=1.4.0->scikit_plot) (1.15.0)
Installing collected packages: joblib, threadpoolctl, scikit-learn, scikit-plot
Successfully installed joblib-1.0.1 scikit-learn-0.23.0 scikit-plot-0.3.7 threadpoolctl-2.1.0
Ignoring pip: markers 'python_version < "3"' don't match your environment
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/nix/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Requirement already satisfied: scikit_learn in ./env/lib/python3.8/site-packages (0.23.0)
Requirement already satisfied: numpy>=1.13.3 in ./env/lib/python3.8/site-packages (from scikit_learn) (1.19.1)
Requirement already satisfied: scipy>=0.19.1 in ./env/lib/python3.8/site-packages (from scikit_learn) (1.5.2)
Requirement already satisfied: threadpoolctl>=2.0.0 in ./env/lib/python3.8/site-packages (from scikit_learn) (2.1.0)
Requirement already satisfied: joblib>=0.11 in ./env/lib/python3.8/site-packages (from scikit_learn) (1.0.1)
Cloning into 'EMG_exp'...
Checking out files:  21% (334/1589)   Checking out files:  22% (350/1589)   Checking out files:  23% (366/1589)   Checking out files:  24% (382/1589)   Checking out files:  25% (398/1589)   Checking out files:  26% (414/1589)   Checking out files:  27% (430/1589)   Checking out files:  28% (445/1589)   Checking out files:  29% (461/1589)   Checking out files:  30% (477/1589)   Checking out files:  31% (493/1589)   Checking out files:  32% (509/1589)   Checking out files:  33% (525/1589)   Checking out files:  34% (541/1589)   Checking out files:  35% (557/1589)   Checking out files:  36% (573/1589)   Checking out files:  37% (588/1589)   Checking out files:  38% (604/1589)   Checking out files:  38% (608/1589)   Checking out files:  39% (620/1589)   Checking out files:  40% (636/1589)   Checking out files:  41% (652/1589)   Checking out files:  42% (668/1589)   Checking out files:  43% (684/1589)   Checking out files:  44% (700/1589)   Checking out files:  45% (716/1589)   Checking out files:  46% (731/1589)   Checking out files:  47% (747/1589)   Checking out files:  48% (763/1589)   Checking out files:  49% (779/1589)   Checking out files:  50% (795/1589)   Checking out files:  51% (811/1589)   Checking out files:  52% (827/1589)   Checking out files:  53% (843/1589)   Checking out files:  54% (859/1589)   Checking out files:  55% (874/1589)   Checking out files:  56% (890/1589)   Checking out files:  57% (906/1589)   Checking out files:  58% (922/1589)   Checking out files:  59% (938/1589)   Checking out files:  60% (954/1589)   Checking out files:  61% (970/1589)   Checking out files:  62% (986/1589)   Checking out files:  63% (1002/1589)   Checking out files:  64% (1017/1589)   Checking out files:  65% (1033/1589)   Checking out files:  66% (1049/1589)   Checking out files:  67% (1065/1589)   Checking out files:  68% (1081/1589)   Checking out files:  69% (1097/1589)   Checking out files:  70% (1113/1589)   Checking out files:  71% (1129/1589)   Checking out files:  72% (1145/1589)   Checking out files:  73% (1160/1589)   Checking out files:  74% (1176/1589)   Checking out files:  75% (1192/1589)   Checking out files:  76% (1208/1589)   Checking out files:  77% (1224/1589)   Checking out files:  78% (1240/1589)   Checking out files:  79% (1256/1589)   Checking out files:  80% (1272/1589)   Checking out files:  81% (1288/1589)   Checking out files:  82% (1303/1589)   Checking out files:  83% (1319/1589)   Checking out files:  84% (1335/1589)   Checking out files:  85% (1351/1589)   Checking out files:  86% (1367/1589)   Checking out files:  87% (1383/1589)   Checking out files:  88% (1399/1589)   Checking out files:  89% (1415/1589)   Checking out files:  90% (1431/1589)   Checking out files:  91% (1446/1589)   Checking out files:  92% (1462/1589)   Checking out files:  93% (1478/1589)   Checking out files:  94% (1494/1589)   Checking out files:  95% (1510/1589)   Checking out files:  96% (1526/1589)   Checking out files:  97% (1542/1589)   Checking out files:  98% (1558/1589)   Checking out files:  99% (1574/1589)   Checking out files: 100% (1589/1589)   Checking out files: 100% (1589/1589), done.
WARNING    /localscratch/ng1998.62331521.0/EMG_exp/encode.py:124: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  X_EMG = np.array(X_EMG)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/EMG_exp/encode.py:124: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  X_EMG = np.array(X_EMG)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/EMG_exp/encode.py:250: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_test_up = np.array(spike_times_test_up)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/EMG_exp/encode.py:250: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_test_up = np.array(spike_times_test_up)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/EMG_exp/encode.py:252: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_train_up = np.array(spike_times_train_up)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/EMG_exp/encode.py:252: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_train_up = np.array(spike_times_train_up)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/env/lib/python3.8/site-packages/numpy/core/_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  return array(a, dtype, copy=False, order=order, subok=True)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/env/lib/python3.8/site-packages/numpy/core/_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  return array(a, dtype, copy=False, order=order, subok=True)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/EMG_exp/encode.py:124: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  X_EMG = np.array(X_EMG)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/EMG_exp/encode.py:124: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  X_EMG = np.array(X_EMG)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/EMG_exp/encode.py:250: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_test_up = np.array(spike_times_test_up)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/EMG_exp/encode.py:250: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_test_up = np.array(spike_times_test_up)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/EMG_exp/encode.py:252: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_train_up = np.array(spike_times_train_up)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/EMG_exp/encode.py:252: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_train_up = np.array(spike_times_train_up)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/env/lib/python3.8/site-packages/numpy/core/_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  return array(a, dtype, copy=False, order=order, subok=True)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/env/lib/python3.8/site-packages/numpy/core/_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  return array(a, dtype, copy=False, order=order, subok=True)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/EMG_exp/encode.py:124: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  X_EMG = np.array(X_EMG)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/EMG_exp/encode.py:124: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  X_EMG = np.array(X_EMG)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/EMG_exp/encode.py:250: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_test_up = np.array(spike_times_test_up)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/EMG_exp/encode.py:250: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_test_up = np.array(spike_times_test_up)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/EMG_exp/encode.py:252: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_train_up = np.array(spike_times_train_up)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/EMG_exp/encode.py:252: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  spike_times_train_up = np.array(spike_times_train_up)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/env/lib/python3.8/site-packages/numpy/core/_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  return array(a, dtype, copy=False, order=order, subok=True)
 [py.warnings]
WARNING    /localscratch/ng1998.62331521.0/env/lib/python3.8/site-packages/numpy/core/_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  return array(a, dtype, copy=False, order=order, subok=True)
 [py.warnings]
{'dataset': 'roshambo', 'encode_thr_up': 0.5, 'encode_thr_dn': 0.5, 'encode_refractory': 1, 'encode_interpfact': 5, 'encoded_data_file_prefix': 'encoded-emg', 'learning_algorithm': 'none', 'stdp_tau': 10, 'stdp_apre': 0.0001, 'memoryless_flag': True, 'online_flag': True, 'topology': 'custom', 'macrocolumnShape': [4, 4, 4], 'minicolumnShape': [2, 2, 1], 'connection_density': 0.6, 'wmax': 1, 'wmin': 0.01, 'winitmax': 1, 'winitmin': 1, 'win': '1', 'cbf': 1, 'lr_critical': 0.1, 'excitatoryProb': 0.8, 'adaptiveProb': 1, 'init_tau_min': 10, 'init_tau_max': 20, 'init_thr_min': 1, 'init_thr_max': 1.5, 'refractory': 2, 'tstep': 200, 'freeze_time_ms': 1, 'tstart': 0, 'tlast': 1800, 'duration': 2000, 'input_connection_density': 0.3, 'experiment_name': 'standalone', 'target': 'cython', 'dt': 1, 'fold': 3, 'classes_dict': ['rock', 'paper', 'scissor'], 'path_input_connections': 'inp.txt', 'path_res_connections': 'Conn_map.txt', 'log_file_path': None}
{'dataset': 'roshambo', 'encode_thr_up': 0.5, 'encode_thr_dn': 0.5, 'encode_refractory': 1, 'encode_interpfact': 5, 'encoded_data_file_prefix': 'encoded-emg', 'learning_algorithm': 'none', 'stdp_tau': 10, 'stdp_apre': 0.0001, 'memoryless_flag': True, 'online_flag': True, 'topology': 'custom', 'macrocolumnShape': [4, 4, 4], 'minicolumnShape': [2, 2, 1], 'connection_density': 0.6, 'wmax': 1, 'wmin': 0.01, 'winitmax': 1, 'winitmin': 1, 'win': '1', 'cbf': 1, 'lr_critical': 0.1, 'excitatoryProb': 0.8, 'adaptiveProb': 1, 'init_tau_min': 10, 'init_tau_max': 20, 'init_thr_min': 1, 'init_thr_max': 1.5, 'refractory': 2, 'tstep': 200, 'freeze_time_ms': 1, 'tstart': 0, 'tlast': 1800, 'duration': 2000, 'input_connection_density': 0.3, 'experiment_name': 'roshambo0.5511', 'target': 'cython', 'dt': 1, 'fold': 1, 'classes_dict': ['rock', 'paper', 'scissor'], 'path_input_connections': 'inp.txt', 'path_res_connections': 'Conn_map.txt', 'log_file_path': None}
Loaded subject01_session01: EMG = [(8962, 8)] // ANN = [8962]
Loaded subject01_session02: EMG = [(8933, 8)] // ANN = [8933]
Loaded subject01_session03: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject02_session01: EMG = [(8990, 8)] // ANN = [8990]
Loaded subject02_session02: EMG = [(8985, 8)] // ANN = [8985]
Loaded subject02_session03: EMG = [(8975, 8)] // ANN = [8975]
Loaded subject03_session01: EMG = [(8976, 8)] // ANN = [8976]
Loaded subject03_session02: EMG = [(8949, 8)] // ANN = [8949]
Loaded subject03_session03: EMG = [(8981, 8)] // ANN = [8981]
Loaded subject04_session01: EMG = [(8953, 8)] // ANN = [8953]
Loaded subject04_session02: EMG = [(8943, 8)] // ANN = [8943]
Loaded subject04_session03: EMG = [(8953, 8)] // ANN = [8953]
Loaded subject05_session01: EMG = [(9185, 8)] // ANN = [9185]
Loaded subject05_session02: EMG = [(9146, 8)] // ANN = [9146]
Loaded subject05_session03: EMG = [(9150, 8)] // ANN = [9150]
Loaded subject06_session01: EMG = [(8984, 8)] // ANN = [8984]
Loaded subject06_session02: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject06_session03: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject07_session01: EMG = [(8961, 8)] // ANN = [8961]
Loaded subject07_session02: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject07_session03: EMG = [(8988, 8)] // ANN = [8988]
Loaded subject08_session01: EMG = [(8948, 8)] // ANN = [8948]
Loaded subject08_session02: EMG = [(8921, 8)] // ANN = [8921]
Loaded subject08_session03: EMG = [(8954, 8)] // ANN = [8954]
Loaded subject09_session01: EMG = [(9163, 8)] // ANN = [9163]
Loaded subject09_session02: EMG = [(9149, 8)] // ANN = [9149]
Loaded subject09_session03: EMG = [(9150, 8)] // ANN = [9150]
Loaded subject10_session01: EMG = [(8983, 8)] // ANN = [8983]
Loaded subject10_session02: EMG = [(8951, 8)] // ANN = [8951]
Loaded subject10_session03: EMG = [(8988, 8)] // ANN = [8988]
Done sorting trials!
All good!
Number of samples in dataset:
450
450
Class labels:
[0, 1, 2]
Subjects : 
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Sessions : 
[1, 2, 3]
Trials per session : 
[0, 1, 2, 3, 4]
Average spiking rate
115.03354166666665
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
Number of Train samples : 
3000
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
Number of Test samples : 
1500
Input test accuraccy
0.786
Baseline accuraccy
0.5726666666666667
{'dataset': 'roshambo', 'encode_thr_up': 0.5, 'encode_thr_dn': 0.5, 'encode_refractory': 1, 'encode_interpfact': 5, 'encoded_data_file_prefix': 'encoded-emg', 'learning_algorithm': 'none', 'stdp_tau': 10, 'stdp_apre': 0.0001, 'memoryless_flag': True, 'online_flag': True, 'topology': 'custom', 'macrocolumnShape': [4, 4, 4], 'minicolumnShape': [2, 2, 1], 'connection_density': 0.6, 'wmax': 1, 'wmin': 0.01, 'winitmax': 1, 'winitmin': 1, 'win': '1', 'cbf': 1, 'lr_critical': 0.1, 'excitatoryProb': 0.8, 'adaptiveProb': 1, 'init_tau_min': 10, 'init_tau_max': 20, 'init_thr_min': 1, 'init_thr_max': 1.5, 'refractory': 2, 'tstep': 200, 'freeze_time_ms': 1, 'tstart': 0, 'tlast': 1800, 'duration': 2000, 'input_connection_density': 0.3, 'experiment_name': 'roshambo0.5512', 'target': 'cython', 'dt': 1, 'fold': 2, 'classes_dict': ['rock', 'paper', 'scissor'], 'path_input_connections': 'inp.txt', 'path_res_connections': 'Conn_map.txt', 'log_file_path': None}
Loaded subject01_session01: EMG = [(8962, 8)] // ANN = [8962]
Loaded subject01_session02: EMG = [(8933, 8)] // ANN = [8933]
Loaded subject01_session03: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject02_session01: EMG = [(8990, 8)] // ANN = [8990]
Loaded subject02_session02: EMG = [(8985, 8)] // ANN = [8985]
Loaded subject02_session03: EMG = [(8975, 8)] // ANN = [8975]
Loaded subject03_session01: EMG = [(8976, 8)] // ANN = [8976]
Loaded subject03_session02: EMG = [(8949, 8)] // ANN = [8949]
Loaded subject03_session03: EMG = [(8981, 8)] // ANN = [8981]
Loaded subject04_session01: EMG = [(8953, 8)] // ANN = [8953]
Loaded subject04_session02: EMG = [(8943, 8)] // ANN = [8943]
Loaded subject04_session03: EMG = [(8953, 8)] // ANN = [8953]
Loaded subject05_session01: EMG = [(9185, 8)] // ANN = [9185]
Loaded subject05_session02: EMG = [(9146, 8)] // ANN = [9146]
Loaded subject05_session03: EMG = [(9150, 8)] // ANN = [9150]
Loaded subject06_session01: EMG = [(8984, 8)] // ANN = [8984]
Loaded subject06_session02: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject06_session03: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject07_session01: EMG = [(8961, 8)] // ANN = [8961]
Loaded subject07_session02: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject07_session03: EMG = [(8988, 8)] // ANN = [8988]
Loaded subject08_session01: EMG = [(8948, 8)] // ANN = [8948]
Loaded subject08_session02: EMG = [(8921, 8)] // ANN = [8921]
Loaded subject08_session03: EMG = [(8954, 8)] // ANN = [8954]
Loaded subject09_session01: EMG = [(9163, 8)] // ANN = [9163]
Loaded subject09_session02: EMG = [(9149, 8)] // ANN = [9149]
Loaded subject09_session03: EMG = [(9150, 8)] // ANN = [9150]
Loaded subject10_session01: EMG = [(8983, 8)] // ANN = [8983]
Loaded subject10_session02: EMG = [(8951, 8)] // ANN = [8951]
Loaded subject10_session03: EMG = [(8988, 8)] // ANN = [8988]
Done sorting trials!
All good!
Number of samples in dataset:
450
450
Class labels:
[0, 1, 2]
Subjects : 
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Sessions : 
[1, 2, 3]
Trials per session : 
[0, 1, 2, 3, 4]
Average spiking rate
116.393125
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
Number of Train samples : 
3000
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
Number of Test samples : 
1500
Input test accuraccy
0.79
Baseline accuraccy
0.582
{'dataset': 'roshambo', 'encode_thr_up': 0.5, 'encode_thr_dn': 0.5, 'encode_refractory': 1, 'encode_interpfact': 5, 'encoded_data_file_prefix': 'encoded-emg', 'learning_algorithm': 'none', 'stdp_tau': 10, 'stdp_apre': 0.0001, 'memoryless_flag': True, 'online_flag': True, 'topology': 'custom', 'macrocolumnShape': [4, 4, 4], 'minicolumnShape': [2, 2, 1], 'connection_density': 0.6, 'wmax': 1, 'wmin': 0.01, 'winitmax': 1, 'winitmin': 1, 'win': '1', 'cbf': 1, 'lr_critical': 0.1, 'excitatoryProb': 0.8, 'adaptiveProb': 1, 'init_tau_min': 10, 'init_tau_max': 20, 'init_thr_min': 1, 'init_thr_max': 1.5, 'refractory': 2, 'tstep': 200, 'freeze_time_ms': 1, 'tstart': 0, 'tlast': 1800, 'duration': 2000, 'input_connection_density': 0.3, 'experiment_name': 'roshambo0.5513', 'target': 'cython', 'dt': 1, 'fold': 3, 'classes_dict': ['rock', 'paper', 'scissor'], 'path_input_connections': 'inp.txt', 'path_res_connections': 'Conn_map.txt', 'log_file_path': None}
Loaded subject01_session01: EMG = [(8962, 8)] // ANN = [8962]
Loaded subject01_session02: EMG = [(8933, 8)] // ANN = [8933]
Loaded subject01_session03: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject02_session01: EMG = [(8990, 8)] // ANN = [8990]
Loaded subject02_session02: EMG = [(8985, 8)] // ANN = [8985]
Loaded subject02_session03: EMG = [(8975, 8)] // ANN = [8975]
Loaded subject03_session01: EMG = [(8976, 8)] // ANN = [8976]
Loaded subject03_session02: EMG = [(8949, 8)] // ANN = [8949]
Loaded subject03_session03: EMG = [(8981, 8)] // ANN = [8981]
Loaded subject04_session01: EMG = [(8953, 8)] // ANN = [8953]
Loaded subject04_session02: EMG = [(8943, 8)] // ANN = [8943]
Loaded subject04_session03: EMG = [(8953, 8)] // ANN = [8953]
Loaded subject05_session01: EMG = [(9185, 8)] // ANN = [9185]
Loaded subject05_session02: EMG = [(9146, 8)] // ANN = [9146]
Loaded subject05_session03: EMG = [(9150, 8)] // ANN = [9150]
Loaded subject06_session01: EMG = [(8984, 8)] // ANN = [8984]
Loaded subject06_session02: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject06_session03: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject07_session01: EMG = [(8961, 8)] // ANN = [8961]
Loaded subject07_session02: EMG = [(8989, 8)] // ANN = [8989]
Loaded subject07_session03: EMG = [(8988, 8)] // ANN = [8988]
Loaded subject08_session01: EMG = [(8948, 8)] // ANN = [8948]
Loaded subject08_session02: EMG = [(8921, 8)] // ANN = [8921]
Loaded subject08_session03: EMG = [(8954, 8)] // ANN = [8954]
Loaded subject09_session01: EMG = [(9163, 8)] // ANN = [9163]
Loaded subject09_session02: EMG = [(9149, 8)] // ANN = [9149]
Loaded subject09_session03: EMG = [(9150, 8)] // ANN = [9150]
Loaded subject10_session01: EMG = [(8983, 8)] // ANN = [8983]
Loaded subject10_session02: EMG = [(8951, 8)] // ANN = [8951]
Loaded subject10_session03: EMG = [(8988, 8)] // ANN = [8988]
Done sorting trials!
All good!
Number of samples in dataset:
450
450
Class labels:
[0, 1, 2]
Subjects : 
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Sessions : 
[1, 2, 3]
Trials per session : 
[0, 1, 2, 3, 4]
Average spiking rate
116.95500000000001
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
Number of Train samples : 
3000
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
Number of Test samples : 
1500
Input test accuraccy
0.796
Baseline accuraccy
0.5693333333333334
DEBUG:microcircuit:Creating the microcircuit...
DEBUG:microcircuit:Configuring neuron state variables initial values...
DEBUG:microcircuit:Configuring excitatory/inhibitory type of neurons...
DEBUG:microcircuit:Configuring adaptive/Non-adaptive type of neurons...
DEBUG:microcircuit:Creating network topology custom ...
{'dataset': 'roshambo', 'encode_thr_up': 0.5, 'encode_thr_dn': 0.5, 'encode_refractory': 1, 'encode_interpfact': 5, 'encoded_data_file_prefix': 'encoded-emg', 'learning_algorithm': 'none', 'stdp_tau': 10, 'stdp_apre': 0.0001, 'memoryless_flag': True, 'online_flag': True, 'topology': 'custom', 'macrocolumnShape': [4, 4, 4], 'minicolumnShape': [2, 2, 1], 'connection_density': 0.6, 'wmax': 1, 'wmin': 0.01, 'winitmax': 1, 'winitmin': 1, 'win': '1', 'cbf': 1, 'lr_critical': 0.1, 'excitatoryProb': 0.8, 'adaptiveProb': 1, 'init_tau_min': 10, 'init_tau_max': 20, 'init_thr_min': 1, 'init_thr_max': 1.5, 'refractory': 2, 'tstep': 200, 'freeze_time_ms': 1, 'tstart': 0, 'tlast': 1800, 'duration': 2000, 'input_connection_density': 0.3, 'experiment_name': 'standalone', 'target': 'cython', 'dt': 1, 'fold': 3, 'classes_dict': ['rock', 'paper', 'scissor'], 'path_input_connections': 'inp.txt', 'path_res_connections': 'Conn_map.txt', 'log_file_path': '/home/ng1998/project/out/62331521'}
{'dataset': 'roshambo', 'encode_thr_up': 0.5, 'encode_thr_dn': 0.5, 'encode_refractory': 1, 'encode_interpfact': 5, 'encoded_data_file_prefix': 'encoded-emg', 'learning_algorithm': 'none', 'stdp_tau': 25, 'stdp_apre': 0.001, 'memoryless_flag': True, 'online_flag': True, 'topology': 'custom', 'macrocolumnShape': [4, 4, 4], 'minicolumnShape': [2, 2, 1], 'connection_density': 0.3, 'wmax': 1, 'wmin': 0.01, 'winitmax': 1, 'winitmin': 1, 'win': '1.0*rand()', 'cbf': 1, 'lr_critical': 0.1, 'excitatoryProb': 1, 'adaptiveProb': 1, 'init_tau_min': 25, 'init_tau_max': 25, 'init_thr_min': 1, 'init_thr_max': 1, 'refractory': 1, 'tstep': 200, 'freeze_time_ms': 0, 'tstart': 600, 'tlast': 1200, 'duration': 2000, 'input_connection_density': 0.15, 'experiment_name': 'Corr_Cr_2048_I_50_R_6.txtinp_Cr_2048_I_50_R_3.txtTrue0.156001200none110.3111', 'target': 'cython', 'dt': 1, 'fold': 1, 'classes_dict': ['rock', 'paper', 'scissor'], 'path_input_connections': 'inp_Cr_2048_I_50_R_3.txt', 'path_res_connections': 'Corr_Cr_2048_I_50_R_6.txt', 'log_file_path': '/home/ng1998/project/out/62331521'}
INFO:evaluate_reservoir:Number of neurons in the population: 256
INFO:evaluate_reservoir:Number of synapses in the population: 2048
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 1
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 117.00 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 417.86 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 2
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 115.31 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 392.60 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 3
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 116.53 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 439.54 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 4
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Serif' (DroidSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Serif' (DroidSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans Mono' (DroidSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Serif' (DroidSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Serif' (DroidSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans' (DroidSans.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans' (DroidSans-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Math TeX Gyre' (DejaVuMathTeXGyre.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/localscratch/ng1998.62331521.0/env/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Serif' (DroidSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Serif' (DroidSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans Mono' (DroidSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Serif' (DroidSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Serif' (DroidSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans' (DroidSans.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans' (DroidSans-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Math TeX Gyre' (DejaVuMathTeXGyre.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/localscratch/ng1998.62331521.0/env/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
INFO:evaluate_reservoir:Average input firing rate: 124.72 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 447.30 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 5
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 120.81 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 436.79 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 6
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 109.28 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 404.74 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 7
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 109.97 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 438.07 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 8
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 113.81 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 440.18 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 9
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 105.72 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 443.94 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 10
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 103.03 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 437.77 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 11
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 132.72 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 448.24 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 12
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 131.81 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 441.83 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 13
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 126.72 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 440.84 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 14
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 130.84 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 443.24 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 15
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 131.38 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 445.09 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 16
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 114.22 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 389.90 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 17
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 109.78 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 425.15 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 18
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 132.19 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 445.08 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 19
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 116.84 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 437.85 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 20
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 124.78 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 444.23 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 21
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 108.34 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 443.09 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 22
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 104.88 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 443.71 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 23
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in 1s
INFO:evaluate_reservoir:Average input firing rate: 109.47 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 412.50 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 24
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 109.78 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 396.27 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 25
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 100.88 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 443.32 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 26
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 121.78 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 444.83 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 27
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 116.78 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 446.87 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 28
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 124.88 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 448.74 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 29
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 118.12 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 446.39 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 30
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 114.50 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 444.58 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 31
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 139.78 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 394.58 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 32
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 144.16 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 396.50 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 33
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 144.75 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 407.27 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 34
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 138.53 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 436.66 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 35
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 140.47 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 424.96 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 36
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 152.56 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 447.86 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 37
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 142.69 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 391.44 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 38
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 140.22 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 413.51 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 39
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 145.97 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 434.22 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 40
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 137.16 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 443.13 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 41
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 131.91 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 445.79 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 42
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 121.69 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 387.70 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 43
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 108.69 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 439.54 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 44
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 109.03 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 388.54 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 45
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 128.34 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 444.67 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 46
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 141.62 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 386.81 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 47
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 143.59 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 438.33 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 48
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 147.62 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 439.18 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 49
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 145.19 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 444.36 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 50
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 154.72 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 444.89 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 51
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 144.75 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 397.49 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 52
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 138.91 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 430.53 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 53
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 139.94 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 423.46 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 54
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 147.00 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 442.65 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 55
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 133.97 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 434.28 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 56
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 127.72 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 409.41 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 57
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 128.28 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 439.61 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 58
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 129.25 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 411.96 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 59
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 125.12 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 410.21 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 60
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 128.00 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 446.56 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 61
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 111.66 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 432.00 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 62
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 118.62 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 444.08 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 63
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 125.44 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 439.26 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 64
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 117.28 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 430.64 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 65
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 116.97 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 385.97 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 66
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 97.75 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 434.11 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 67
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 122.22 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 442.50 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 68
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 110.75 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 410.48 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 69
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 95.41 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 360.31 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 70
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 105.19 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 429.84 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 71
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 96.03 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 423.99 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 72
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 102.78 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 437.31 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 73
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 94.69 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 390.85 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 74
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 94.00 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 387.60 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 75
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 96.34 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 385.60 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 76
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 113.78 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 429.14 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 77
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in 1s
INFO:evaluate_reservoir:Average input firing rate: 104.12 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 404.55 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 78
Starting simulation at t=0. s for a duration of 2. s
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 128.44 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 425.37 Hz
INFO:evaluate_reservoir:Reset reservoir weights
INFO:evaluate_reservoir:Simulating for iteration 79
Starting simulation at t=0. s for a duration of 2. s
slurmstepd: error: *** JOB 62331521 ON cdr787 CANCELLED AT 2021-02-21T03:47:49 ***
2. s (100%) simulated in < 1s
INFO:evaluate_reservoir:Average input firing rate: 119.72 Hz
INFO:evaluate_reservoir:Average reservoir firing rate: 396.88 Hz
